private string GenerateJwtToken(User existingUser)
        {
            var secret = config["Secret"];
            var expiryDays = config.GetValue<int>("ExpiryDays");
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Issuer = config["Issuer"],
                Audience = config["Audience"],
                Subject = new ClaimsIdentity(new[]
                {
                    new Claim (JwtRegisteredClaimNames.Jti, existingUser.Id.ToString()),
                    new Claim("role", existingUser.Role.ToString())
                }),
                Expires = DateTime.UtcNow.AddDays(expiryDays),
                SigningCredentials = new SigningCredentials(
                    new SymmetricSecurityKey(Encoding.ASCII.GetBytes(secret)),
                    SecurityAlgorithms.HmacSha256Signature)
            };
            var tokenHandler = new JwtSecurityTokenHandler();
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
https://github.com/RutujaVetal123/Shopping-Cart-Frontend







using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ToyStoreAPI.Models;

namespace ToyStoreAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ToysController : ControllerBase
    {
        private readonly ToysDBContext _context;

        public ToysController(ToysDBContext context)
        {
            _context = context;
        }

        // GET: api/Toys
        [HttpGet]
        [Route("GetToys")]
        public async Task<ActionResult<IEnumerable<Toy>>> GetToys()
        {
          if (_context.Toys == null)
          {
              return NotFound();
          }
            return await _context.Toys.ToListAsync();
        }

        // GET: api/Toys/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Toy>> GetToy(int id)
        {
          if (_context.Toys == null)
          {
              return NotFound();
          }
            var toy = await _context.Toys.FindAsync(id);

            if (toy == null)
            {
                return NotFound();
            }

            return toy;
        }

        // PUT: api/Toys/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut]
        [Route("PutToys/{id}")]
        public async Task<IActionResult> PutToy(int id, Toy toy)
        {
            //server side validation
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            if (id != toy.Id)
            {
                return BadRequest();
            }

            _context.Entry(toy).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ToyExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Toys
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        [Route("PostToys")]
        public async Task<ActionResult<Toy>> PostToy(Toy toy)
        {
            //server side validation
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            if (_context.Toys == null)
          {
              return Problem("Entity set 'ToysDBContext.Toys'  is null.");
          }
            _context.Toys.Add(toy);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetToy", new { id = toy.Id }, toy);
        }

        // DELETE: api/Toys/5
        [HttpDelete]
        [Route("DelToys/{id}")]
        public async Task<IActionResult> DeleteToy(int id)
        {
            if (_context.Toys == null)
            {
                return NotFound();
            }
            var toy = await _context.Toys.FindAsync(id);
            if (toy == null)
            {
                return NotFound();
            }

            _context.Toys.Remove(toy);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool ToyExists(int id)
        {
            return (_context.Toys?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
